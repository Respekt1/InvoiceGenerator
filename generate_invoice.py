#!/usr/bin/env python
# -*- coding: UTF-8 -*-
"""
Simple script to generate PDF invoices, encrypt & email to clients.
"""

import gnupg
import os
import sys
import requests
from requests.auth import HTTPBasicAuth
import fpdf
import yaml
import datetime

fh = open('config.yaml', 'r')
config = yaml.load(fh)

gpg_home = config['gnupg_homedir']
companies_house_api = config['companies_house_api']
companies_house_api_key = config['companies_house_api_key']

gpg = gnupg.GPG(homedir=gpg_home)
gpg.encoding = 'utf-8'


today = datetime.datetime.now()

class MyPDF(fpdf.FPDF):
    """"""
 
    def header(self):
        """
        Header on each page
        """
        # set the font for the header, B=Bold
        self.set_font("Arial", style="B", size=18)
        # page title
        self.cell(40,10, config['business_name'], border=0, ln=0, align="C")
        self.set_x(150.0)
        self.cell(40,10, 'INVOICE', border=0, ln=0, align="R")
        # insert a line break of 20 pixels
        self.ln(20)
 

    def footer(self):
        """
        Footer on each page
        """
        # position footer at 15mm from the bottom
        self.set_y(-15)
 
        # set the font, I=italic
        self.set_font("Arial", style="I", size=8)
 
        # display the page number and center it
        pageNum = "Page %s/{nb}" % self.page_no()
        self.cell(0, 10, pageNum, align="C")
        self.cell(0, 10, 'Generated by: https://github.com/kwhitlock/InvoiceGenerator', align="R")

def encrypt_file(file_name):
    '''
    Blah
    '''

    public_keys = gpg.list_sigs()

    for index, key in enumerate(public_keys):
        print("{}\t{}\n\t{}".format(index, key['uids'][0], key['keyid']))
        
    ans = raw_input('Which key do you wish to encrypt your invoice with?: ')


    print("Encrypting file..")

    with open(file_name, 'rb') as f:
        status = gpg.encrypt(
            f, config['my_gpg_pub_id'], public_keys[int(ans)]['keyid'],
            output = file_name+'.gpg')

    print 'ok: ', status.ok
    print 'status: ', status.status
    print 'stderr: ', status.stderr


def generate_pdf(company, items, financials):
    '''
    Blah
    '''
    print("Generating PDF Invoice..") 
    pdf = MyPDF()
    pdf.alias_nb_pages()
    pdf.add_page()
    
    # Border
    pdf.rect(5.0, 5.0, 200.0, 280.0)

    # Left client info
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10,'INVOICE TO:', 0, 0, 'L')
    pdf.ln(7)
    pdf.cell(0, 10,company['Name'], 0, 0, 'L')
    pdf.ln(7)
    pdf.cell(0, 10,company['Address'], 0, 1, 'L')
    pdf.ln(15)

    # Top right summary box
    pdf.set_fill_color(255, 255, 255)
    pdf.rect(110, 55, 90.0, 25.0,style = 'DF')
    pdf.set_font("Arial", size=8)
    pdf.set_xy(120.0, 60.0)
    pdf.cell(20, 0,'INVOICE NO', 0, 0, 'L')
    pdf.set_xy(150.0, 60.0)
    pdf.cell(20, 0,'INVOICE DATE', 0, 0, 'L')
    pdf.set_xy(170.0, 60.0)
    pdf.cell(20, 0,'TOTAL', 0, 0, 'L')
    pdf.ln(7)
    pdf.set_font("Arial", size=10)
    pdf.set_xy(120.0, 70.0)
    pdf.cell(20, 0,'0005', 0, 0, 'L')
    pdf.set_xy(150.0, 70.0)
    pdf.cell(20, 0, today.strftime("%d/%m/%Y"), 0, 0, 'L')
    pdf.set_xy(170.0, 70.0)
    pdf.cell(20, 0, u'£'+str(financials['total']), 0, 0, 'L')

    # Main itemised list box
    # Header

    pdf.rect(8.0, 90.0, 195.0, 120.0)
    pdf.set_xy(10.0,100.0)
    pdf.set_font("Arial", size=12)
    pdf.set_x(10.0)
    pdf.cell(20, 0,'DESCRIPTION', 0, 0)
    pdf.set_x(60.0)
    pdf.cell(20, 0,'QTY', 0, 0)
    pdf.set_x(80.0)
    pdf.cell(20, 0,'UNIT', 0, 0)
    pdf.set_x(100.0)
    pdf.cell(20, 0,'NET', 0, 0)
    pdf.set_x(120.0)
    pdf.cell(20, 0,'VAT', 0, 0)
    pdf.set_x(140.0)
    pdf.cell(20, 0,'VAT TOTAL', 0, 0)
    pdf.set_x(180.0)
    pdf.cell(20, 0,'TOTAL', 0, 0)
    # Content
    pdf.set_xy(10.0,105.0)
    for item in items:
        pdf.set_x(10.0)
        pdf.cell(0, 10, str(item[0]))
        pdf.set_x(60.0)
        pdf.cell(0, 10, str(item[1]))
        pdf.set_x(80.0)
        pdf.cell(0, 10, u'£'+str(item[2]))
        pdf.set_x(100.0)
        pdf.cell(0, 10, u'£'+str(item[3]))
        pdf.set_x(120.0)
        pdf.cell(0, 10, u'£'+str(item[4]))
        pdf.set_x(140.0)
        pdf.cell(0, 10, u'£'+str(item[5]))
        pdf.set_x(180.0)
        pdf.cell(0, 10, u'£'+str(item[6]), 0, 1)

    pdf.set_xy(140.0,200.0)
    pdf.cell(0, 0,'TOTAL: ', 0, 0)
    pdf.set_xy(180.0,200.0)
    pdf.cell(0, 0,u'£'+str(financials['total']), 0, 0)
    
    # Banking information
    pdf.rect(8.0, 220.0, 100.0, 30.0)
    pdf.set_xy(10.0,225.0)
    pdf.cell(0, 0,'PAYMENT METHOD: ', 0, 1)
    pdf.set_y(235.0)
    pdf.cell(0, 0,'Account Number: '+config['account_number'], 0, 1)
    pdf.set_y(240.0)
    pdf.cell(0, 0,'Sort Code: '+config['sort_code'], 0, 1)

    # Thanks

    pdf.set_xy(10.0,270.0)
    pdf.cell(0, 0,'Thank you for your business!', 0, 0)

    # Generate PDF file
    pdf_file_name = "invoice-{}-{}.pdf".format(today.strftime("%Y-%m-%d"), company['Name'].replace(' ', '_'))
    pdf.output(pdf_file_name)

    return pdf_file_name


def get_companies_house_info(s):
    '''
    Blah
    '''
    active_companies = []
    r = requests.get( companies_house_api, params={'q':s}, auth=HTTPBasicAuth(companies_house_api_key,''))
    results = r.json()['items']
    for company in results:
        if company['company_status'] == 'active':
            active_companies.append(company)

    return active_companies



def main():
    '''
    Main
    '''

    client = raw_input('Who are you invoicing?: ')
    active_companies = get_companies_house_info(client)
    
    for index, co in enumerate(active_companies):
        print("{}:\t{}\n\t{}".format(index, co['title'], co['snippet']))

    selection = raw_input("Choose the index for the correct company, or type a custom name: ")
    
    if selection.isdigit():
        selection = int(selection)
        print("Company {}, has been selected.".format(active_companies[selection]['title']))
        invoiced_client = {'Name':active_companies[selection]['title'], 'Address': active_companies[selection]['snippet']}
    else:
        invoiced_client = {'Name': selection}
        invoiced_client['Address'] = raw_input('What is the address of {}?: '.format(selection))
    
    items = []
    financials = {'total':0}
    while True:
        print('Enter your billables and finish with ctrl+c')
        try:
            description = raw_input('description: ')
            qty = raw_input('qty: ')
            price = raw_input('price: ')
            vat = raw_input('vat: ')

            net = int(qty) * int(price)
            vat_tot = int(qty) * int(vat)
            total = net + vat_tot

            items.append([description, qty, price, price, vat, str(vat_tot), str(total)])
            financials['total'] += total
        except KeyboardInterrupt:
            break

    file_name = generate_pdf(invoiced_client, items, financials)

    if raw_input("Do you wish to encrypt your invoice? y/n: ") == 'y':
        encrypt_file(file_name)
    else:
        print('Not encrypting file: {}'.format(file_name))
    

if __name__ == '__main__':
    main()
